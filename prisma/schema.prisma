datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

model DraftPick {
  id String @id @default(cuid())

  pickNumber Int

  Player Player @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playerId String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String

  @@unique([pickNumber, teamId])
}

model Episode {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  description String
  duration Int
  episode Int
  filepath String
  filesize Int
  filetype String @default("audio/mpeg")
  publishDate DateTime
  season Int
  shownotes String
  title String
}

model FSquaredEntry {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  teams Team[]

  @@unique([year, userId], name: "entryByUserAndYear")
}

model League {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  name String
  sleeperLeagueId String @unique
  sleeperDraftId String @unique
  draftDateTime DateTime?
  tier Int

  isActive Boolean

  teams Team[]
}

model NFLGame {
  id String @id @default(cuid())

  status String

  homeTeam NFLTeam @relation(name: "HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeTeamId String
  homeTeamScore Int

  awayTeam NFLTeam @relation(name: "AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  awayTeamId String
  awayTeamScore Int
}

model NFLTeam {
  id String @id @default(cuid())

  name String
  location String
  mascot String
  logo String?

  HomeGames NFLGame[] @relation(name: "HomeTeam")
  AwayGames NFLGame[] @relation(name: "AwayTeam")
}

model Player {
  id String @id @default(cuid())

  sleeperId String @unique

  position String?
  firstName String
  lastName String
  fullName String
  nflTeam String?

  DraftPicks DraftPick[]
}

model Registration {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  year Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Team {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wins Int
  ties Int
  losses Int
  sleeperOwnerId String
  pointsFor Float
  pointsAgainst Float
  rosterId Int
  draftPosition Int?

  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leagueId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  FSquaredSelections FSquaredEntry[]
  DraftPicks DraftPick[]
}

model User {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordId String @unique
  discordName String
  discordAvatar String
  discordRoles String[]

  sleeperOwnerID String @default("")

  registrations Registration[]
  episodes Episode[]
  teams Team[]
  fSquaredEntries FSquaredEntry[]
}